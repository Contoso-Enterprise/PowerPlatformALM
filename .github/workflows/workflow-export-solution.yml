name: workflow-export-solution 

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      solution-name:
        description: "Solution Name"
        type: string
        required: true
        default: 'OrgDemo'
      environment:
        type: string
        required: true
      ClearEnvironmentVariableValues:
        description: 'Clear Environment variables current values'
        type: boolean
        default: false
      isCommit:
        type: boolean
        default: false
      commitMessage:
        type: string
      branch-name:
        type: string
      branch-type:
        type: string
      VersionMajorIncrement:
        type: number
        default: 0
      VersionMinorIncrement:
        type: number
        default: 0
      VersionReleaseIncrement:
        type: number
        default: 0
      VersionPatchIncrement:
        type: number
        default: 0
      folder-path:
        type: string
        required: false
        default: '.'
      delete-existing-source:
        type: boolean
        default: false
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  export:
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Set environment variables
        run: | 
          $branchName = ${{ inputs.branch-type }}/${{ inputs.branch-name }}
          $releaseDate = (Get-Date).toString('yyyyMMdd');
          echo "release-date=$releaseDate" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "branch-name=$branchName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        #echo "release-date=$(date +'%Y%m%d')" >> "$GITHUB_ENV"
        shell: pwsh
      - name: Checkout branch
        uses: actions/checkout@v4
      #  with:
      #     ref: ${{ inputs.branch-type }}/${{ inputs.branch-name }}
        
      # Runs a single command using the runners shell
      - name: Variables 
        run: |
          echo ${{ vars.POWERPLATFORMORGURI }}
          echo ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          echo ${{ env.release-date }}
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
      - name: Publish Solution Customizations
        uses: microsoft/powerplatform-actions/publish-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
      - name: Export Unmanaged Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-name: ${{ inputs.solution-name }}
          solution-output-file: '${{ inputs.folder-path }}/solutions/${{ inputs.solution-name }}.zip'
          overwrite: true
          export-general-settings: true
      - name: Export Managed Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-name: ${{ inputs.solution-name }}
          solution-output-file: '${{ inputs.folder-path }}/solutions/${{ inputs.solution-name }}_managed.zip'
          managed: true
          overwrite: true
          export-general-settings: true
      - name: Delete existing source file
        if: ${{ inputs.delete-existing-source == true }}
        run: |
          if (Test-Path -LiteralPath "${{ inputs.folder-path }}/src/${{ inputs.solution-name }}") {
            try {
              Remove-Item -Path "${{ inputs.folder-path }}/src/${{ inputs.solution-name }}"
              write-host "${{ inputs.folder-path }}/src/${{ inputs.solution-name }} deleted"
            }
            catch {
              write-host "error deleting ${{ inputs.folder-path }}/src/${{ inputs.solution-name }}"
            }
          } else {
            write-host "${{ inputs.folder-path }}/src/${{ inputs.solution-name }} no found."
          }
        shell: pwsh
      - name: Unpack Solution
        uses: microsoft/powerplatform-actions/unpack-solution@v1
        with:
          solution-file: '${{ inputs.folder-path }}/solutions/${{ inputs.solution-name }}.zip'
          solution-folder: '${{ inputs.folder-path }}/src/${{ inputs.solution-name }}/'
          process-canvas-apps: true
          solution-type: 'Both'
          overwrite-files: true
      - name: Deblug list of files
        shell: pwsh
        run: |
          Get-ChildItem -path '${{ inputs.folder-path }}' -Recurse | foreach { write-host $_.FullName }
      - name: Clear environment variables current values
        id: clear-solution-env-var
        if:  ${{ inputs.ClearEnvironmentVariableValues == true }}
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          $version = Clear-CurentEnvironmentVariables -solutionName '${{ inputs.solution-name }}' -folder-path '${{ inputs.folder-path }}' -deleteCurrentValues $true
        shell: pwsh
      - name: 'Update Solution Version'
        if: ${{ inputs.VersionMajorIncrement >= 0 || inputs.VersionMinorIncrement >= 0 || inputs.VersionReleaseIncrement >= 0 ||inputs.VersionPatchIncrement >= 0 }}
      - name: update solution version
        id: update-solution-version
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          switch (${{ inputs.branch-type }}){
            "main" {
              $version = Increment-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folder-path '${{ inputs.folder-path }}' -MajorVersionIncrement 1 -updateVersion $true
            }
            "feature" {
              $version = Increment-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folder-path '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "release" {
              $version = Increment-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folder-path '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "development"{
              $version = Increment-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folder-path '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "hotfix" {
              $version = Increment-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folder-path '${{ inputs.folder-path }}' -PatchVersionIncrement 1 -updateVersion $true
            }
            "bugfix" {
              $version = Increment-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folder-path '${{ inputs.folder-path }}' -PatchVersionIncrement 1 -updateVersion $true
            }
            default {
              $version = Increment-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folder-path '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
          }
          write-host $version
        shell: pwsh
      - name: branch Solution
        uses: microsoft/powerplatform-actions/branch-solution@v1
        with:
          solution-folder: '${{ inputs.folder-path }}/src/${{ inputs.solution-name }}'
          solution-target-folder: '${{ inputs.folder-path }}/src/${{ inputs.solution-name }}'
          branch-name: ${{ env.branch-name }}
          repo-url: 'https://github.com/Contoso-Enterprise/PowerPlatformALM'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Commit to branch
      #   if: ${{ inputs.isCommit == true }}
      #   uses: EndBug/add-and-commit@v9
      #   with: 
      #     author_name: 'System Administrator'
      #     author_email: admin@MngEnvMCAP157851.onmicrosoft.com
      #     message: ${{ inputs.commitMessage }}
      #     new_branch: ${{ inputs.branch-type }}/${{ inputs.branch-name }}
      #     add: '${{ inputs.folder-path }}/src/. --force'
      #     default_author: github_actor
      #     github_token: ${{ secrets.GITHUB_TOKEN }}