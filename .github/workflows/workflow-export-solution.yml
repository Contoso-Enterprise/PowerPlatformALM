# This is a basic workflow to help you get started with Actions

name: workflow-export-solution 

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      solution-name:
        description: "Solution Name"
        type: string
        required: true
        default: 'OrgDemo'
      environment:
        type: string
        required: true
      ClearEnvironmentVariableValues:
        description: 'Clear Environment variables current values'
        type: boolean
        default: false
      isCommit:
        type: boolean
        default: false
      commitMessage:
        type: string
      branch-name:
        type: string
      branch-type:
        type: string
      VersionMajorIncrement:
        type: number
        default: 0
      VersionMinorIncrement:
        type: number
        default: 0
      VersionReleaseIncrement:
        type: number
        default: 0
      VersionPatchIncrement:
        type: number
        default: 0
      folderPath:
        type: string
        required: false
        default: '.'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  export:
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Set release-date
        run: | 
          $releaseDate = (Get-Date).toString('yyyyMMdd');
          echo "release-date=$releaseDate" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        #echo "release-date=$(date +'%Y%m%d')" >> "$GITHUB_ENV"
        shell: pwsh
      - name: Checkout branch
        uses: actions/checkout@v4
      #  with:
      #     ref: ${{ inputs.branch-type }}/${{ inputs.branch-name }}
        
      # Runs a single command using the runners shell
      - name: Variables 
        run: |
          echo ${{ vars.POWERPLATFORMORGURI }}
          echo ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          echo ${{ env.release-date }}
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v0
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
      - name: Publish Solution Customizations
        uses: microsoft/powerplatform-actions/publish-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
      - name: Export Unmanaged Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-name: ${{ inputs.solution-name }}
          solution-output-file: '${{ inputs.folderPath }}/solutions/${{ inputs.solution-name }}.zip'
          overwrite: true
          export-general-settings: true
      - name: Export Managed Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI_DEV }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-name: ${{ inputs.solution-name }}
          solution-output-file: '${{ inputs.folderPath }}/solutions/${{ inputs.solution-name }}_managed.zip'
          managed: true
          overwrite: true
          export-general-settings: true
      - name: Unpack Solution
        uses: microsoft/powerplatform-actions/unpack-solution@v1
        with:
          solution-file: '${{ inputs.folderPath }}/solutions/${{ inputs.solution-name }}.zip'
          solution-folder: '${{ inputs.folderPath }}/src/${{ inputs.solution-name }}/'
          process-canvas-apps: true
          solution-type: 'Both'
          overwrite-files: true
      - name: Deblug list of files
        shell: pwsh
        run: |
          Get-ChildItem -path '${{ inputs.folderPath }}' -Recurse | foreach { write-host $_.FullName }
      - name: Clear environment variables current values
        if:  ${{ inputs.ClearEnvironmentVariableValues}} == true
        shell: pwsh
        run: |
          if (Test-Path -LiteralPath "${{ inputs.folderPath }}/src/${{ inputs.solution-name }}/environmentvariabledefinitions") {
          $deleteCurrentValues = $true

          try {
            $envars = Get-ChildItem -Path "${{ inputs.folderPath }}/src/${{ inputs.solution-name }}/environmentvariabledefinitions" -Directory
          }
          catch {
            write-Error $_
            break
          }
          #loop through all environment variables
          foreach ($envvar in $envars) {
              write-host "#########################"
              write-host "Environment Variable Definition: " $envvar.FullName
              try {
                $envardef = Get-ChildItem -path $envvar.FullName -Filter '*.xml'
              }
              catch {
                write-Error $_
                break
              }
              $envardefvalue = select-xml -path $envardef.FullName -XPath "/environmentvariabledefinition"
              if($envardefvalue.Node -ne $null)
              {
                  write-host "Environment Variable Schema Name: " $envardefvalue.Node.schemaname
                  write-host "Environment Variable Default Value: " $envardefvalue.Node.defaultvalue
              }
              try {
                $envarvalue = Get-ChildItem -path $envvar.FullName -Filter '*.json'
              }
              catch {
                write-Error $_
                break
              }
              if($envarvalue -eq $null){
                  write-host "No environment variable current value"
              } else {
                  try {
                    $envarcurrentvalue = (Get-Content -Path $envarvalue.FullName) | ConvertFrom-Json -Depth 3
                  }
                  catch {
                    write-Error $_
                    break
                  }
                  write-host "Environment Variable Curret Value: " $envarcurrentvalue.environmentvariablevalues.environmentvariablevalue.value    
                  if($deleteCurrentValues)
                  {
                      try {
                        Remove-Item -Path $envarvalue.FullName    
                      }
                      catch {
                        write-Error $_
                        break
                      }
                      write-host "Environment Variable Current Value Deleted"
                  }
              }
            }
          }
          else {
            write-host "${{ inputs.folderPath }}/src/${{ inputs.solution-name }}/environmentvariabledefinitions not found"
          }
      - name: 'Update Solution Version'
        if: ${{ inputs.VersionMajorIncrement }} >= 0 || ${{ inputs.VersionMinorIncrement }} >= 0 || ${{ inputs.VersionReleaseIncrement }} >= 0 || ${{ inputs.VersionPatchIncrement }} >= 0 
        shell: pwsh
        run: |
          If (Test-Path -LiteralPath "${{ inputs.folderPath }}/src/${{ inputs.solution-name }}/Other/Solution.xml") {
            try{
              [xml]$solutionXml = Get-Content -Path "${{ inputs.folderPath }}/src/${{ inputs.solution-name }}/Other/Solution.xml" 
            }
            catch {
              write-Error $_
              break
            }
            $version = $solutionXml.ImportExportXml.SolutionManifest.Version
            Write-Host "Current solution version: $version"
            $setVersion = $version.Split(".")
            $setVersion[0] = [int]$setVersion[0] + ${{ inputs.VersionMajorIncrement }}
            $setVersion[1] = [int]$setVersion[1] + ${{ inputs.VersionMinorIncrement }}
            $setVersion[2] = [int]$setVersion[2] + ${{ inputs.VersionReleaseIncrement }}
            $setVersion[3] = [int]$setVersion[3] + ${{ inputs.VersionPatchIncrement }}
            $newVersion = $setVersion[0] + "." + $setVersion[1] + "."  + $setVersion[2] + "."  + $setVersion[3]
            write-host "New solution version: $newVersion"
            $solutionXml.ImportExportXml.SolutionManifest.Version = $newVersion
            try {
              $solutionXml.Save("${{ inputs.folderPath }}/src/${{ inputs.solution-name }}/Other/Solution.xml")
            }
            catch {
              write-Error $_
              break
            }
            write-host "solution version updated"
          }
          else {
            Write-host "${{ inputs.folderPath }}/src/${{ inputs.solution-name }}/Other/Solution.xml file not found"
          }
      - name: Commit to branch
        if: ${{ inputs.isCommit == true }}
        uses: EndBug/add-and-commit@v9
        with: 
          author_name: 'System Administrator'
          author_email: admin@MngEnvMCAP157851.onmicrosoft.com
          message: ${{ inputs.commitMessage }}
          new_branch: ${{ inputs.branch-type }}/${{ inputs.branch-name }}
          add: '${{ inputs.folderPath }}/src/. --force'
