name: Release Contoso_University_core

on:
  release:
    types: [created]
env:
  solution-name: 'contoso_university_core'
  use-setting-file: true
  branch-type: 'main'
  branch-name: ''
permissions:
  contents: write

jobs:
  release-staging-setup:
    environment: 'Contoso Staging'
    runs-on: ubuntu-latest
    outputs:
      setting-file: ${{ steps.staging-setting-file-variables.outputs.setting-file }}
      solution-name: ${{ steps.staging-setting-file-variables.outputs.solution-name }}
      branch-type: ${{ steps.staging-setting-file-variables.outputs.branch-type }}
      branch-name: ${{ steps.staging-setting-file-variables.outputs.branch-name }}
    steps: 
    - name: Set environment variables to output
      id: staging-setting-file-variables
      run: |        
        write-Host "ref ${{ github.ref }}"        
        write-Host "GITHUB_REF ${{ github.GITHUB_REF }}"
        if ('${{ env.use-setting-file }}' -eq 'true')
        {
          if (Test-Path -LiteralPath "settings/${{ env.solution-name }}-Contoso Staging.json") {
            $settingFile = 'settings/${{ env.solution-name }}-Contoso Staging.json'
          } else {
            $settingFile = ''
          }        
        } else {
          $settingFile = ''
        }
        echo "setting-file=$settingFile" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        echo "setting-file=$settingFile" >> "$GITHUB_OUTPUT"
        echo "solution-name='${{ env.solution-name }}'" >> "$GITHUB_OUTPUT"
        echo "branch-name='${{ env.branch-name }}'" >> "$GITHUB_OUTPUT"
        echo "branch-type='${{ env.branch-type }}'" >> "$GITHUB_OUTPUT"
      shell: pwsh
      run: |

  release-staging:
    needs: [release-staging-setup]
    uses: Contoso-Enterprise/PowerPlatformALM/.github/workflows/workflow-import-solution.yml@main
    with:
      environment: 'Contoso Staging'
      solution-name: ${{ needs.release-staging-setup.outputs.solution-name }}
      branch-name: '${{ needs.release-staging-setup.outputs.branch-name }}'
      branch-type: '${{ needs.release-staging-setup.outputs.branch-type }}'
      settings-file: ${{ needs.release-staging-setup.outputs.setting-file }}
      folder-path: '.'
      managed: true
    secrets: inherit
  release-production-setup:
    needs: [release-staging]
    environment: 'Contoso Production'
    runs-on: ubuntu-latest
    outputs:
      setting-file: ${{ steps.production-setting-file-variables.outputs.setting-file }}
      solution-name: ${{ steps.production-setting-file-variables.outputs.solution-name }}
      branch-type: ${{ steps.production-setting-file-variables.outputs.branch-type }}
      branch-name: ${{ steps.production-setting-file-variables.outputs.branch-name }}
    steps: 
    - name: Production Variables      
      id: production-setting-file-variables
      run: |        
        write-Host "ref ${{ github.ref }}"        
        write-Host "GITHUB_REF ${{ github.GITHUB_REF }}"
        if (${{ env.use-setting-file }} -eq $true)
        {

          if (Test-Path -LiteralPath "settings/${{ env.solution-name }}-Contoso Production.json") {
            $settingFile = 'settings/${{ env.solution-name }}-Contoso Production.json'
          } else {
            $settingFile = ''
          }
        } else {
          $settingFile = ''
        }
        echo "setting-file=$settingFile" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append; 
        echo "setting-file=$settingFile" >> "$GITHUB_OUTPUT"
        echo "solution-name='${{ env.solution-name }}'" >> "$GITHUB_OUTPUT"
        echo "branch-name='${{ env.branch-name }}'" >> "$GITHUB_OUTPUT"
        echo "branch-type='${{ env.branch-type }}'" >> "$GITHUB_OUTPUT"
      shell: pwsh
  release-production:
    needs: [release-production-setup]
    uses: Contoso-Enterprise/PowerPlatformALM/.github/workflows/workflow-import-solution.yml@main
    with: 
      environment: 'Contoso Production'
      solution-name: ${{ needs.release-production-setup.outputs.solution-name }}
      branch-name: '${{ needs.release-production-setup.outputs.branch-name }}'
      branch-type: '${{ needs.release-production-setup.outputs.branch-type }}'
      folder-path: '.'
      settings-file: ${{ needs.release-production-setup.outputs.setting-file }}
      managed: true
    secrets: inherit
