# This is a basic workflow to help you get started with Actions

name: action-test

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      solution-name:
        description: "Solution Name"
        type: string
        required: true
        default: 'OrgDemo'
      branch-name:
        type: string
        required: false
        default: '002'
      branch-type:
        type: string
        required: true
        default: 'feature'
      folder-path:
        type: string
        required: false
        default: '.'
      release-name:
        type: string
        required: false
        default: '.'
      source-environment:
        type: environment
        required: true
        default: 'Contoso Development'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  testing:
    environment: ${{ inputs.source-environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions: 
      actions: read
      contents: read
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout branch main
        uses: actions/checkout@v4
      - name: Deblug list of files
        shell: pwsh
        run: |
          Get-ChildItem -path '${{ inputs.folderPath }}' -Recurse | foreach { write-host $_.FullName }
      - name: Check solution exists
        id: check-solution-exists
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          $token = Connect-Dataverse -dataverseHost '${{ vars.POWERPLATFORMORGURI }}' -tenantId ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }} -clientId ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }} -clientSecret ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }} 
          $results = Get-DataverseSolution -token $token -dataverseHost '${{ vars.POWERPLATFORMORGURI }}' -solutionUniqueName '${{ inputs.solution-name }}'
          if($solutionUniqueName -in $results.uniquename)
          {
              echo "check-solution-exists=$true" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append; 
          }
          else 
          {
              echo "check-solution-exists=$false" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append; 
          }
        shell: pwsh
      - name: Check solution version
        id: check-solution-version
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          $version = Get-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folderPath ''
          write-host $version
        shell: pwsh
      - name: Test pwsh output
        run: |
          echo ${{ env.check-solution-exists }}
      - name: Set release variables
        run: |
          $solutionName = '${{ Inputs.solution-name }}';
          if (($inputs.'release-name').length -gt 1)
          {
            $releaseName = $inputs.'release-name'
            write-host "release name: $releaseName"     
            if (($inputs.'folder-path').length -gt 1 )
            {
              $releasePath = $inputs.'folder-path' + '/release/'+ $releaseName + '/'
            } else {
              $releasePath = 'release/' + $releaseName +'/'
            }
          } else {
            write-host "release name: null"     
            if (($inputs.'folder-path').length -gt 1 )
            {
              if (Test-Path -LiteralPath "$($inputs.'folder-path')/release") {
                write-host "tested $($inputs.'folder-path')/release successful"
                $latestRelease = Get-ChildItem -path "$($inputs.'folder-path')/release" -verbose | where {$_.PSIsContainer -eq 'true' } | sort CreationTime -Descending | select -first 1
                $latestRelease | ft
                write-host "latest release: ($latestRelease.Name)"
                $releaseName = $latestRelease.name
                $releasePath = $inputs.'folder-path' + '/release/' + $releaseName + '/' 
              } else {
                write-Error "Release folder not found"
              }
            } else {
              if (Test-Path -LiteralPath "release") {
                write-host "tested release successful"
                $latestRelease = Get-ChildItem -path "release" -Directory | Sort-Object -Property 'CreationTime' -Descending -top 1
                $latestRelease | select *
                write-host "latest release: ($latestRelease.Name)"
                $releaseName = $latestRelease.name
                $releasePath = 'release/'+ $releaseName + '/'
              } else {
                write-Error "Release folder not found"
              }
            }
          }
          write-Host $releasePath;
          write-Host ${{ Inputs.solution-name}} ;
          echo "release-name=$releaseName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "release-path=$releasePath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      - name: update solution version
        id: update-solution-version
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          $version = GeIncrement-SolutionVersion -solutionName '${{ inputs.solution-name }}' -folderPath '' -MajorVersionIncrement 1
          write-host $version
        shell: pwsh
      - name: update solution version
        id: update-solution-version
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          $version = Clear-CurentEnvironmentVariables -solutionName '${{ inputs.solution-name }}' -folderPath '' -MajorVersionIncrement 1
          write-host $version
        shell: pwsh



  get-solution-version:
    uses: Contoso-Enterprise/PowerPlatformALM/.github/workflows/workflow-get-solution-version.yml@main
    with: 
      solution-name: ${{ inputs.solution-name }}
      branch-name: 'main'
      folder-path: ''
    secrets: inherit
  testing2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions: 
      actions: read
      contents: read
      # Steps represent a sequence of tasks that will be executed as part of the job
    needs: [get-solution-version] 
    steps:
      - name: output version number
        run: |
          echo ${{ needs.get-solution-version.outputs.solution-version }}
