# This is a basic workflow to help you get started with Actions

name: action-import-solution 

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      solution-name:
        description: "Solution Name"
        type: string
        required: true
        default: 'OrgDemo'
      environment:
        type: string
        required: true
      branch-name:
        type: string
      folder-path:
        type: string
        required: false
        default: '.'
      release-name:
        type: string
        required: false
        default: '.'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  export:
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set environment variables
        run: |
          $solutionName = '${{ Inputs.solution-name }}';
          if (($inputs.'folder-path').length -gt 1 ){
            $releasePath = $inputs.'folder-path' + '/' + $inputs.'release-name' + '/' 
          } else
          {
            $releasePath = 'release/'+ $inputs.'release-name' + '/'
          }
          if ($inputs.'branch' )
          write-Host $releasePath;
          write-Host ${{ Inputs.solution-name}} ;
          echo "release-path=$releasePath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      - name: check-branch-exists
        id: check-branch-exists
        uses: GuillaumeFalourd/branch-exists@v1
        with:
          branch: ${{ inputs.branch-name }}
      - name: debug check exists
        run: echo "${{ steps.check-branch-exists.outputs }}"
      - name: Checkout branch if exists
        if: steps.check-branch-exists.outputs.exists == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch-name }}
      - name: Checkout branch main
        if: steps.check-branch-exists.outputs.exists != 'true'
        uses: actions/checkout@v4
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v0
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
      - name: import managed Solution
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}_managed.zip'
          stage-and-upgrade: true
      - name: Publish Solution Customizations
        uses: microsoft/powerplatform-actions/publish-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
